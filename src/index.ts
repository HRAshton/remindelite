import path from 'path';
import { app } from 'electron';
import { TrayService } from './electron/services/tray-service';
import { WindowService } from './electron/services/window-service';
import { DatabaseService } from './electron/services/database-service';
import { DataControlService } from './electron/services/data-control-service';
import { Repository } from './common/repository';
import { NotificationsService } from './electron/services/notifications-service';
import { COMPATIBILITY_VERSION } from './common/entries';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

if (require('electron-squirrel-startup')) {
  app.quit();
}

if (!app.requestSingleInstanceLock()) {
  app.quit();
}

const iconPath = path.join(__dirname, 'assets/icon.ico');
const dbPath = path.join(
  app.getPath('appData'),
  'remindelite',
  `database.${COMPATIBILITY_VERSION}.db`,
);

const databaseService = new DatabaseService(dbPath);
const repository = new Repository(databaseService);
const dataControlService = new DataControlService(dbPath);
const notificationsService = new NotificationsService(repository);
const windowService = new WindowService(
  MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
  MAIN_WINDOW_WEBPACK_ENTRY,
  iconPath,
);
const trayService = new TrayService(windowService, iconPath, app, dataControlService);

app.on('ready', () => {
  databaseService.initialize();
  trayService.initialize();
  notificationsService.scheduleNotifications();
  windowService.toggleWindow();
});

app.on('before-quit', function (evt) {
  databaseService.commit();
  trayService.destroy();
});

app.on('window-all-closed', function () {
  // Empty handler to prevent the app from quitting
  // when all windows are closed
});
